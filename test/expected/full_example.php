<?php namespace Validators;
// AUTOGENERATED BY grunt-laravel-validator FROM test/fixtures/full_example.js, PLEASE, DON'T MODIFY IT

use App;
use Input;
use Log;
use Str;


class FullExample {

  public static function validate() {
    return self::validateData(Input::all());
  }

  public static function error($data, $msg) {
    $bt = debug_backtrace();
    $caller = array_shift($bt);
    Log::error($msg);
    Log::debug($caller['file'] . '::' . $caller['line']);
    Log::debug(var_export($data, TRUE));
    App::abort(403, 'validator error');
  }

  public static function validateData($data) {
    $valid = array();
    $store = array();

    if (!is_array($data)) {
      self::error($data, 'root is not an array');
    }

    if (!isset($data['fstring'])) {
      $data['fstring'] = null;
    }

    $value = $data['fstring'];
    if (is_null($value)) {
      $value = '';
    }
    if (is_int($value) || is_float($value)) {
      $value = strval($value);
    }
    if (!is_string($value)) {
      self::error($data, 'key fstring is not a string');
    }

    $valid['fstring'] = $value;

    if (!isset($data['finteger'])) {
      $data['finteger'] = null;
    }

    $value = $data['finteger'];
    if (is_null($value)) {
      $value = 0;
    }
    if (is_string($value)) {
      if (ctype_digit($value)) {
        $value = intval($value);
      }
    }
    if (!is_int($value)) {
      self::error($data, 'key finteger is not an integer');
    }

    $valid['finteger'] = $value;

    if (!isset($data['fboolean'])) {
      $data['fboolean'] = null;
    }

    $value = $data['fboolean'];
    if (is_null($value)) {
      $value = 0;
    }
    if (is_string($value)) {
      if ($value === 'true' || $value === '1' || $value === 'on') {
        $value = true;
      }
      if ($value === 'false' || $value === '0' || $value === 'off') {
        $value = false;
      }
    }
    if (is_int($value)) {
      if ($value === 1) {
        $value = true;
      }
      if ($value === 0) {
        $value = false;
      }
    }
    if (!is_bool($value)) {
      self::error($data, 'key fboolean is not a boolean');
    }

    $valid['fboolean'] = $value;

    return $valid;
  }

}
