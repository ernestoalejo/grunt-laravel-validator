<?php namespace Validators;
// AUTOGENERATED BY grunt-laravel-validator FROM test/fixtures/recursive_example.js, PLEASE, DON'T MODIFY IT

use App;
use Input;
use Log;
use Str;

class RecursiveExample {

  public static function validate() {
    return self::validateData(Input::all());
  }

  public static function error($data, $msg) {
    $bt = debug_backtrace();
    $caller = array_shift($bt);
    Log::error($msg);
    Log::debug($caller['file'] . '::' . $caller['line']);
    Log::debug(var_export($data, TRUE));
    App::abort(403, 'validator error');
  }

  public static function validateData($data) {
    $valid = array();
    $store = array();

    if (!is_array($data)) {
      self::error($data, 'root is not an array');
    }

    if (!isset($data['fobj'])) {
      $data['fobj'] = null;
    }

    $value = $data['fobj'];
    if (is_null($value)) {
      $value = array();
    }
    if (!is_array($value)) {
      self::error($data, 'key ' . 'fobj' . ' is not an object');
    }
    $valid['fobj'] = array();

    if (!isset($data['fobj']['fstring'])) {
      $data['fobj']['fstring'] = null;
    }

    $value = $data['fobj']['fstring'];
    if (is_null($value)) {
      $value = '';
    }
    if (is_int($value) || is_float($value)) {
      $value = strval($value);
    }
    if (!is_string($value)) {
      self::error($data, 'key ' . 'fstring' . ' is not a string');
    }

    $valid['fobj']['fstring'] = $value;

    if (!isset($data['fobj']['fobj2'])) {
      $data['fobj']['fobj2'] = null;
    }

    $value = $data['fobj']['fobj2'];
    if (is_null($value)) {
      $value = array();
    }
    if (!is_array($value)) {
      self::error($data, 'key ' . 'fobj2' . ' is not an object');
    }
    $valid['fobj']['fobj2'] = array();

    if (!isset($data['fobj']['fobj2']['finteger'])) {
      $data['fobj']['fobj2']['finteger'] = null;
    }

    $value = $data['fobj']['fobj2']['finteger'];
    if (is_null($value)) {
      $value = 0;
    }
    if (is_string($value)) {
      if (ctype_digit($value)) {
        $value = intval($value);
      }
    }
    if (!is_int($value)) {
      self::error($data, 'key ' . 'finteger' . ' is not an integer');
    }

    $valid['fobj']['fobj2']['finteger'] = $value;

    if (!isset($data['farr'])) {
      $data['farr'] = null;
    }

    $value = $data['farr'];
    if (is_null($value)) {
      $value = array();
    }
    if (!is_array($value)) {
      self::error($data, 'key ' . 'farr' . ' is not an array');
    }
    if (count($value) < 2) {
      self::error($data, 'array ' . 'farr' . ' has less than 2 items');
    }
    $valid['farr'] = array();

    $size0 = count($data['farr']);
    for ($i0 = 0; $i0 < $size0; $i0++) {
      if (!isset($data['farr'][$i0])) {
        self::error($data, 'array has not key ' . $i0);
      }

      $value = $data['farr'][$i0];
      if (is_null($value)) {
        $value = '';
      }
      if (is_int($value) || is_float($value)) {
        $value = strval($value);
      }
      if (!is_string($value)) {
        self::error($data, 'key ' . $i0 . ' is not a string');
      }

      $valid['farr'][$i0] = $value;

    }

    if (!isset($data['farrobj'])) {
      $data['farrobj'] = null;
    }

    $value = $data['farrobj'];
    if (is_null($value)) {
      $value = array();
    }
    if (!is_array($value)) {
      self::error($data, 'key ' . 'farrobj' . ' is not an array');
    }
    if (count($value) < 0) {
      self::error($data, 'array ' . 'farrobj' . ' has less than 0 items');
    }
    $valid['farrobj'] = array();

    $size1 = count($data['farrobj']);
    for ($i1 = 0; $i1 < $size1; $i1++) {
      if (!isset($data['farrobj'][$i1])) {
        self::error($data, 'array has not key ' . $i1);
      }

      $value = $data['farrobj'][$i1];
      if (is_null($value)) {
        $value = array();
      }
      if (!is_array($value)) {
        self::error($data, 'key ' . $i1 . ' is not an object');
      }
      $valid['farrobj'][$i1] = array();

      if (!isset($data['farrobj'][$i1]['fstring'])) {
        $data['farrobj'][$i1]['fstring'] = null;
      }

      $value = $data['farrobj'][$i1]['fstring'];
      if (is_null($value)) {
        $value = '';
      }
      if (is_int($value) || is_float($value)) {
        $value = strval($value);
      }
      if (!is_string($value)) {
        self::error($data, 'key ' . 'fstring' . ' is not a string');
      }

      if (Str::length($value) == 0) {
        self::error($data, 'key ' . 'fstring' . ' breaks the required validation');
      }

      $valid['farrobj'][$i1]['fstring'] = $value;

    }

    if (!isset($data['farr1'])) {
      $data['farr1'] = null;
    }

    $value = $data['farr1'];
    if (is_null($value)) {
      $value = array();
    }
    if (!is_array($value)) {
      self::error($data, 'key ' . 'farr1' . ' is not an array');
    }
    if (count($value) < 0) {
      self::error($data, 'array ' . 'farr1' . ' has less than 0 items');
    }
    $valid['farr1'] = array();

    $size2 = count($data['farr1']);
    for ($i2 = 0; $i2 < $size2; $i2++) {
      if (!isset($data['farr1'][$i2])) {
        self::error($data, 'array has not key ' . $i2);
      }

      $value = $data['farr1'][$i2];
      if (is_null($value)) {
        $value = array();
      }
      if (!is_array($value)) {
        self::error($data, 'key ' . $i2 . ' is not an array');
      }
      if (count($value) < 0) {
        self::error($data, 'array ' . $i2 . ' has less than 0 items');
      }
      $valid['farr1'][$i2] = array();

      $size3 = count($data['farr1'][$i2]);
      for ($i3 = 0; $i3 < $size3; $i3++) {
        if (!isset($data['farr1'][$i2][$i3])) {
          self::error($data, 'array has not key ' . $i3);
        }

        $value = $data['farr1'][$i2][$i3];
        if (is_null($value)) {
          $value = array();
        }
        if (!is_array($value)) {
          self::error($data, 'key ' . $i3 . ' is not an array');
        }
        if (count($value) < 0) {
          self::error($data, 'array ' . $i3 . ' has less than 0 items');
        }
        $valid['farr1'][$i2][$i3] = array();

        $size4 = count($data['farr1'][$i2][$i3]);
        for ($i4 = 0; $i4 < $size4; $i4++) {
          if (!isset($data['farr1'][$i2][$i3][$i4])) {
            self::error($data, 'array has not key ' . $i4);
          }

          $value = $data['farr1'][$i2][$i3][$i4];
          if (is_null($value)) {
            $value = array();
          }
          if (!is_array($value)) {
            self::error($data, 'key ' . $i4 . ' is not an object');
          }
          $valid['farr1'][$i2][$i3][$i4] = array();

          if (!isset($data['farr1'][$i2][$i3][$i4]['inner'])) {
            $data['farr1'][$i2][$i3][$i4]['inner'] = null;
          }

          $value = $data['farr1'][$i2][$i3][$i4]['inner'];
          if (is_null($value)) {
            $value = 0;
          }
          if (is_string($value)) {
            if ($value === 'true' || $value === '1' || $value === 'on') {
              $value = true;
            }
            if ($value === 'false' || $value === '0' || $value === 'off') {
              $value = false;
            }
          }
          if (is_int($value)) {
            if ($value === 1) {
              $value = true;
            }
            if ($value === 0) {
              $value = false;
            }
          }
          if (!is_bool($value)) {
            self::error($data, 'key ' . 'inner' . ' is not a boolean');
          }

          $valid['farr1'][$i2][$i3][$i4]['inner'] = $value;

        }

      }

    }

    if (!isset($data['ffoo'])) {
      $data['ffoo'] = null;
    }

    $value = $data['ffoo'];
    if (is_null($value)) {
      $value = '';
    }
    if (is_int($value) || is_float($value)) {
      $value = strval($value);
    }
    if (!is_string($value)) {
      self::error($data, 'key ' . 'ffoo' . ' is not a string');
    }

    $store['foo'] = $value;

    $valid['ffoo'] = $value;

    if (!isset($data['fbar'])) {
      $data['fbar'] = null;
    }

    $value = $data['fbar'];
    if (is_null($value)) {
      $value = '';
    }
    if (is_int($value) || is_float($value)) {
      $value = strval($value);
    }
    if (!is_string($value)) {
      self::error($data, 'key ' . 'fbar' . ' is not a string');
    }

    $store['bar'] = $value;

    $valid['fbar'] = $value;

    if ($store['foo'] == 'bar') {

      if (!isset($data['fstring'])) {
        $data['fstring'] = null;
      }

      $value = $data['fstring'];
      if (is_null($value)) {
        $value = '';
      }
      if (is_int($value) || is_float($value)) {
        $value = strval($value);
      }
      if (!is_string($value)) {
        self::error($data, 'key ' . 'fstring' . ' is not a string');
      }

      $valid['fstring'] = $value;

    }

    if (!isset($data['myobj'])) {
      $data['myobj'] = null;
    }

    if (true) {

      $value = $data['myobj'];
      if (is_null($value)) {
        $value = '';
      }
      if (is_int($value) || is_float($value)) {
        $value = strval($value);
      }
      if (!is_string($value)) {
        self::error($data, 'key ' . 'myobj' . ' is not a string');
      }

      if (Str::length($value) == 0) {
        self::error($data, 'key ' . 'myobj' . ' breaks the required validation');
      }

      $valid['myobj'] = $value;

    }

    if (!isset($data['myarr'])) {
      $data['myarr'] = null;
    }

    $value = $data['myarr'];
    if (is_null($value)) {
      $value = array();
    }
    if (!is_array($value)) {
      self::error($data, 'key ' . 'myarr' . ' is not an array');
    }
    if (count($value) < 0) {
      self::error($data, 'array ' . 'myarr' . ' has less than 0 items');
    }
    $valid['myarr'] = array();

    $size5 = count($data['myarr']);
    for ($i5 = 0; $i5 < $size5; $i5++) {
      if (!isset($data['myarr'][$i5])) {
        self::error($data, 'array has not key ' . $i5);
      }

      if (false) {

        $value = $data['myarr'][$i5];
        if (is_null($value)) {
          $value = 0;
        }
        if (is_string($value)) {
          if (ctype_digit($value)) {
            $value = intval($value);
          }
        }
        if (!is_int($value)) {
          self::error($data, 'key ' . $i5 . ' is not an integer');
        }

        $valid['myarr'][$i5] = $value;

      }

    }

    if (!isset($data['myarr_extended'])) {
      $data['myarr_extended'] = null;
    }

    $value = $data['myarr_extended'];
    if (is_null($value)) {
      $value = array();
    }
    if (!is_array($value)) {
      self::error($data, 'key ' . 'myarr_extended' . ' is not an array');
    }
    if (count($value) < 0) {
      self::error($data, 'array ' . 'myarr_extended' . ' has less than 0 items');
    }
    $valid['myarr_extended'] = array();

    $size6 = count($data['myarr_extended']);
    for ($i6 = 0; $i6 < $size6; $i6++) {
      if (!isset($data['myarr_extended'][$i6])) {
        self::error($data, 'array has not key ' . $i6);
      }

      if (false) {

        $value = $data['myarr_extended'][$i6];
        if (is_null($value)) {
          $value = array();
        }
        if (!is_array($value)) {
          self::error($data, 'key ' . $i6 . ' is not an object');
        }
        $valid['myarr_extended'][$i6] = array();

        if (!isset($data['myarr_extended'][$i6]['qux'])) {
          $data['myarr_extended'][$i6]['qux'] = null;
        }

        if ($store['bar'] === 'bar') {

          $value = $data['myarr_extended'][$i6]['qux'];
          if (is_null($value)) {
            $value = array();
          }
          if (!is_array($value)) {
            self::error($data, 'key ' . 'qux' . ' is not an object');
          }
          $valid['myarr_extended'][$i6]['qux'] = array();

          if (!isset($data['myarr_extended'][$i6]['qux']['myqux'])) {
            $data['myarr_extended'][$i6]['qux']['myqux'] = null;
          }

          $value = $data['myarr_extended'][$i6]['qux']['myqux'];
          if (is_null($value)) {
            $value = 0;
          }
          if (is_string($value)) {
            if ($value === 'true' || $value === '1' || $value === 'on') {
              $value = true;
            }
            if ($value === 'false' || $value === '0' || $value === 'off') {
              $value = false;
            }
          }
          if (is_int($value)) {
            if ($value === 1) {
              $value = true;
            }
            if ($value === 0) {
              $value = false;
            }
          }
          if (!is_bool($value)) {
            self::error($data, 'key ' . 'myqux' . ' is not a boolean');
          }

          $valid['myarr_extended'][$i6]['qux']['myqux'] = $value;

        }

      }

    }

    if (!isset($data['myarr_recursive'])) {
      $data['myarr_recursive'] = null;
    }

    $value = $data['myarr_recursive'];
    if (is_null($value)) {
      $value = array();
    }
    if (!is_array($value)) {
      self::error($data, 'key ' . 'myarr_recursive' . ' is not an array');
    }
    if (count($value) < 0) {
      self::error($data, 'array ' . 'myarr_recursive' . ' has less than 0 items');
    }
    $valid['myarr_recursive'] = array();

    $size7 = count($data['myarr_recursive']);
    for ($i7 = 0; $i7 < $size7; $i7++) {
      if (!isset($data['myarr_recursive'][$i7])) {
        self::error($data, 'array has not key ' . $i7);
      }

      $value = $data['myarr_recursive'][$i7];
      if (is_null($value)) {
        $value = array();
      }
      if (!is_array($value)) {
        self::error($data, 'key ' . $i7 . ' is not an array');
      }
      if (count($value) < 0) {
        self::error($data, 'array ' . $i7 . ' has less than 0 items');
      }
      $valid['myarr_recursive'][$i7] = array();

      $size8 = count($data['myarr_recursive'][$i7]);
      for ($i8 = 0; $i8 < $size8; $i8++) {
        if (!isset($data['myarr_recursive'][$i7][$i8])) {
          self::error($data, 'array has not key ' . $i8);
        }

        $value = $data['myarr_recursive'][$i7][$i8];
        if (is_null($value)) {
          $value = array();
        }
        if (!is_array($value)) {
          self::error($data, 'key ' . $i8 . ' is not an array');
        }
        if (count($value) < 0) {
          self::error($data, 'array ' . $i8 . ' has less than 0 items');
        }
        $valid['myarr_recursive'][$i7][$i8] = array();

        $size9 = count($data['myarr_recursive'][$i7][$i8]);
        for ($i9 = 0; $i9 < $size9; $i9++) {
          if (!isset($data['myarr_recursive'][$i7][$i8][$i9])) {
            self::error($data, 'array has not key ' . $i9);
          }

          $value = $data['myarr_recursive'][$i7][$i8][$i9];
          if (is_null($value)) {
            $value = array();
          }
          if (!is_array($value)) {
            self::error($data, 'key ' . $i9 . ' is not an array');
          }
          if (count($value) < 0) {
            self::error($data, 'array ' . $i9 . ' has less than 0 items');
          }
          $valid['myarr_recursive'][$i7][$i8][$i9] = array();

          $size10 = count($data['myarr_recursive'][$i7][$i8][$i9]);
          for ($i10 = 0; $i10 < $size10; $i10++) {
            if (!isset($data['myarr_recursive'][$i7][$i8][$i9][$i10])) {
              self::error($data, 'array has not key ' . $i10);
            }

            if (true != false) {

              $value = $data['myarr_recursive'][$i7][$i8][$i9][$i10];
              if (is_null($value)) {
                $value = '';
              }
              if (is_int($value) || is_float($value)) {
                $value = strval($value);
              }
              if (!is_string($value)) {
                self::error($data, 'key ' . $i10 . ' is not a string');
              }

              $valid['myarr_recursive'][$i7][$i8][$i9][$i10] = $value;

            }

          }

        }

      }

    }

    return $valid;
  }

}
